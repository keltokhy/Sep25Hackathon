diff --git a/PufferLib/pufferlib/ocean/drone_pp/drone_pp.h b/PufferLib/pufferlib/ocean/drone_pp/drone_pp.h
index abdef6e..b4975d4 100644
--- a/PufferLib/pufferlib/ocean/drone_pp/drone_pp.h
+++ b/PufferLib/pufferlib/ocean/drone_pp/drone_pp.h
@@ -512,11 +512,10 @@ float compute_reward(DronePP* env, Drone *agent, bool collision) {
 
 void reset_pp2(DronePP* env, Drone *agent, int idx) {
     // Keep box/drop spawns farther from hard XY boundaries to reduce early OOB.
-    // Curriculum on spawn band: start tighter, relax toward baseline over ~200k steps
-    // using the monotonic global_tick. This targets the current OOB≈0.92 by reducing
-    // far-field drift early, without adding soft walls or centralizing forces.
-    float progress = clampf((float)env->global_tick / 200000.0f, 0.0f, 1.0f);
-    float edge_margin = 22.0f - 8.0f * progress; // 22→14 over 200k global steps
+    // Use a gentler curriculum to avoid over-centralization at start of training.
+    // Start with reasonable margins (10) and gradually expand to use more space (5).
+    float progress = clampf((float)env->global_tick / 500000.0f, 0.0f, 1.0f);
+    float edge_margin = 10.0f - 5.0f * progress; // 10→5 over 500k global steps
     agent->box_pos = (Vec3){
         rndf(-MARGIN_X + edge_margin, MARGIN_X - edge_margin),
         rndf(-MARGIN_Y + edge_margin, MARGIN_Y - edge_margin),
@@ -549,9 +548,8 @@ void reset_pp2(DronePP* env, Drone *agent, int idx) {
 
     // Spawn the drone near its assigned box to reduce early OOB and
     // encourage immediate hover/grip attempts (diagnostic_grip focus).
-    // Tighten lateral spawn band to reduce large initial traversals that
-    // often lead to OOB with untrained policies.
-    float r_xy = rndf(0.2f, 0.6f);
+    // Use moderate spawn radius to balance proximity with avoiding collisions.
+    float r_xy = rndf(0.5f, 1.5f);
     float theta = rndf(0.0f, 2.0f * (float)M_PI);
     Vec3 spawn_pos = {
         agent->box_pos.x + r_xy * cosf(theta),
