diff --git a/PufferLib/pufferlib/ocean/drone_pp/drone_pp.h b/PufferLib/pufferlib/ocean/drone_pp/drone_pp.h
index eb93d2d..dab4fe4 100644
--- a/PufferLib/pufferlib/ocean/drone_pp/drone_pp.h
+++ b/PufferLib/pufferlib/ocean/drone_pp/drone_pp.h
@@ -739,10 +739,12 @@ void c_step(DronePP *env) {
             // configs set an aggressive value (e.g., 0.02). Target ~200k global steps
             // to go from k_max to k_min: max_decay = (k_max - k_min) / 200_000.
             float sched_t = (float)env->global_tick;
-            // Slow down curriculum: keep k high for much longer so
-            // agents can reliably learn hover/descend/grip before
-            // gates tighten. Previously ~200k steps; now ~50M.
-            float max_decay = (env->grip_k_max - env->grip_k_min) / 50000000.0f;
+            // Curriculum schedule:
+            // Revert to a ~200k-step decay so k reaches its strict
+            // regime within a single run. This allows perfect_grip/
+            // perfect_deliv to register instead of staying at zero
+            // when k remains near k_max across resumed runs.
+            float max_decay = (env->grip_k_max - env->grip_k_min) / 200000.0f;
             float decay = fminf(env->grip_k_decay, max_decay);
             env->grip_k = clampf(sched_t * -decay + env->grip_k_max, env->grip_k_min, 100.0f);
             env->box_k = clampf(sched_t * env->box_k_growth + env->box_k_min, env->box_k_min, env->box_k_max);
